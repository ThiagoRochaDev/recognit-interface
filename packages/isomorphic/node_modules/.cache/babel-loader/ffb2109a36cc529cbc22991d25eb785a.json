{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\tiago\\\\Desktop\\\\THg\\\\Projetos WEB\\\\Faceapp\\\\interface_facerecognition\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\tiago\\\\Desktop\\\\THg\\\\Projetos WEB\\\\Faceapp\\\\interface_facerecognition\\\\shared\\\\isomorphic\\\\containers\\\\Profile\\\\Profile.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport Spin from '@iso/ui/Antd/Spin/Spin';\nimport Modal from '@iso/ui/Antd/Modal/Modal';\nimport Container from '@iso/ui/UI/Container/Container';\nimport AvatarCard from '@iso/components/AvatarCard/AvatarCard';\nimport Posts from './Posts/Posts';\nimport Followers from './Followers/Followers';\nimport Following from './Following/Following';\nimport Wrapper, { Banner, Navigation, ContentWrapper } from './Profile.styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport profileActions from '@iso/redux/profile/actions';\nimport axios from 'axios';\nimport '@uppy/core/dist/style.css';\nimport '@uppy/dashboard/dist/style.css';\nimport Uppy from '@uppy/core';\nimport Tus from '@uppy/tus';\nimport GoogleDrive from '@uppy/google-drive';\nimport Dropbox from '@uppy/dropbox';\nimport Instagram from '@uppy/instagram';\nimport { Dashboard } from '@uppy/react';\nimport AwsS3 from '@uppy/aws-s3';\n\nconst MyProfile = () => {\n  const data = useSelector(state => state.profile.data);\n  const loading = useSelector(state => state.profile.loading);\n  const dispatch = useDispatch();\n  const getProfile = useCallback(() => dispatch(profileActions.fetchProfileDataStart()), [dispatch]);\n\n  const postImage = () => {\n    var albumBucketName = \"BUCKET_NAME\";\n    var bucketRegion = \"REGION\";\n    AWS.config.update({\n      region: bucketRegion,\n      credentials: new AWS.Credentials({\n        accessKeyId: 'akid',\n        secretAccessKey: 'secret'\n      })\n    });\n    var upload = new AWS.S3.ManagedUpload({\n      params: {\n        Bucket: albumBucketName,\n        Key: photoKey,\n        Body: file\n      }\n    });\n    var promise = upload.promise();\n    promise.then(function (data) {\n      alert(\"Successfully uploaded photo.\");\n      viewAlbum(albumName);\n    }, function (err) {\n      return alert(\"There was an error uploading your photo: \", err.message);\n    });\n  };\n\n  const uppy = Uppy.Core({\n    id: 'uppyUpload',\n    // use an id if you plan to use multiple Uppys (on different pages etc.)\n    autoProceed: false,\n    // if true the file uploads as soon as you drag it into the upload area, or select it - your user cannot edit file name or add metadata or tags - for this reason, we use 'false'\n    restrictions: {\n      // we can add restrictions here:\n      maxFileSize: 31457280,\n      //i.e. 30MB\n      maxNumberOfFiles: 20,\n      minNumberOfFiles: null,\n      // if null, no minimum requirement\n      allowedFileTypes: null // can use an array of extensions, i.e. ['.doc', '.docx', '.xls', '.xlsx']\n\n    },\n    logger: Uppy.debugLogger // use this for debugging to see what's gone wrong\n\n  }).use(Uppy.Dashboard, {\n    // configure the Uppy Dashboard plugin...\n    trigger: \".UppyModalOpenerBtn\",\n    // what we click to make Uppy dashboard modal appear - this is the class of our button, above\n    inline: false,\n    // if true, dashboard becomes part of layout rather than a modal - you can eliminate the button in that case\n    closeModalOnClickOutside: true,\n    // if true, we can click anywhere outside the modal to close it\n    showLinkToFileUploadResult: false,\n    // if true, a link to the uploaded file is generated and copies to the user's clipboard when clicked. Note the link won't contain credentials, and you'll need to configure your bucket's permissions and CORS settings to get this to work\n    target: '#drag-drop-area',\n    // this is the id of the <div> above - use a class instead of an id if multiple drag drop areas are required\n    replaceTargetContent: false,\n    // if true, removes all children of the target element - use this to put an upload form in place which disappears if Uppy appears - a fallback option\n    showProgressDetails: true,\n    // false shows % only while true shows % + MB of MB plus time left\n    proudlyDisplayPoweredByUppy: true,\n    // true shows 'Powered by Uppy' branding; false removes this. Attribution is nice...\n    note: \"Images, Word, Excel, PDF, and similar files only, max 20 files of 30 MB each\",\n    // instructions to your users\n    height: 470,\n    // height of the Dashboard in pixels - only applies if \"inline: true\" above - doesn't apply here since we are using the modal - have included here for reference only\n    metaFields: [// here we can include user editable fields, and we can use these elsewhere (i.e. upload as metadata, use as tags, use in our DB, etc.) Note that these don't seem to work out of the box - we need to add our own logic to make them work (notwithstanding the Uppy documentation...)\n    {\n      id: 'name',\n      name: 'Name',\n      placeholder: 'You can rename the file here'\n    }, // id is what we'll use to refer to this; name is what the user sees; placeholder is placeholder text\n    {\n      id: 'caption',\n      name: \"Caption\",\n      placeholder: \"Briefly describe what the file contains\"\n    }],\n    browserBackButtonClose: true // true allows the user to click the browser's back button to close the modal, rather than go back a page - this is a good idea!\n\n  });\n  uppy.use(AwsS3, {\n    // use the AwsS3 plugin                                  \n    fields: [],\n\n    // empty array \n    getUploadParameters(file) {\n      // here we prepare our request to the server for the upload URL\n      return fetch('https://04ie6y9uhl.execute-api.us-east-1.amazonaws.com/dev/client_upload', {\n        // we'll send the info asynchronously via fetch to our nodejs server endpoint, '/uploader' in this case\n        method: 'POST',\n        mode: 'no-cors',\n        // all the examples I found via the Uppy site used 'PUT' and did not work\n        headers: {\n          accept: 'application/json',\n          'content-type': 'application/json' // examples I found via the Uppy site used 'content-type': 'application/json' and did not work\n\n        },\n        body: JSON.stringify({\n          filename: file.name,\n          // here we are passing data to the server/back end\n          contentType: file.type,\n          metadata: {\n            'name': file.meta['name'],\n            // here we pass the 'name' variable to the back end, with 'file.meta['name']' referring to the 'name' from our metaFields id above\n            'caption': file.meta['caption'] // here we pass the 'caption' variable to the back end, with 'file.meta['caption']' referring to the 'caption' from our metaFields id above\n\n          }\n        })\n      }).then(response => {\n        return response.json(); // return the server's response as a JSON promise\n      }).then(data => {\n        console.log('>>>', data); // here you can have a look at the data the server sent back - get rid of this for production!\n\n        return {\n          method: data.method,\n          // here we send method, url, fields and headers to the AWS S3 bucket\n          url: data.url,\n          fields: data.fields,\n          headers: data.headers\n        };\n      });\n    }\n\n  });\n  uppy.on('complete', result => {\n    console.log('successful files:', result.successful);\n    console.log('failed files:', result.failed);\n  });\n\n  const _useState = useState('post'),\n        _useState2 = _slicedToArray(_useState, 2),\n        active = _useState2[0],\n        setActive = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        visible = _useState4[0],\n        setVisible = _useState4[1];\n\n  useEffect(() => {\n    getProfile();\n  }, [getProfile]);\n\n  const handleMenu = type => {\n    if (type === 'post') {\n      setActive(type);\n    }\n\n    if (type === 'upload_picture') {\n      setActive(type);\n      setVisible(true);\n    }\n\n    if (type === 'following') {\n      setActive(type);\n      setVisible(true);\n    }\n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    setActive('post');\n  };\n\n  return React.createElement(Wrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, loading !== true ? React.createElement(React.Fragment, null, React.createElement(Banner, {\n    className: \"profile-banner\",\n    style: {\n      backgroundImage: \"url(\".concat(data.profile_bg, \")\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(Container, {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(AvatarCard, {\n    avatar: data.avatar,\n    name: data.name,\n    username: data.username,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }))), React.createElement(Navigation, {\n    className: \"navigation\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, React.createElement(Container, {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    className: \"menu\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    className: active === 'post' ? 'active' : '',\n    onClick: () => handleMenu('post'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, data.post.length), \" Gallery\"), React.createElement(\"li\", {\n    className: active === 'upload_picture' ? 'active' : '',\n    onClick: () => handleMenu('upload_picture'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    type: \"button\",\n    class: \"ant-btn ant-btn-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \" Upload Pictures\")), React.createElement(\"li\", {\n    className: active === 'following' ? 'active' : '',\n    onClick: () => handleMenu('following'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(\"strong\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, data.following.length), \" Client List\")))), React.createElement(ContentWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, React.createElement(Container, {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(Posts, {\n    avatar: data.avatar,\n    username: data.username,\n    data: data.post,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }), React.createElement(Modal, {\n    wrapClassName: \"follow-modal\",\n    visible: visible,\n    onCancel: handleCancel,\n    footer: null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211\n    },\n    __self: this\n  }, active === 'upload_picture' && React.createElement(Dashboard, {\n    plugins: ['GoogleDrive', 'Dropbox', 'Instagram'],\n    uppy: uppy,\n    inline: true,\n    target: \".DashboardContainer\",\n    replaceTargetContent: true,\n    showProgressDetails: true,\n    note: \"\",\n    height: 470,\n    width: \"100%\",\n    metaFields: [{\n      id: 'name',\n      name: 'Name',\n      placeholder: 'file name'\n    }, {\n      id: 'caption',\n      name: 'Caption',\n      placeholder: 'describe what the image is about'\n    }],\n    browserBackButtonClose: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }), active === 'following' && React.createElement(Following, {\n    data: data.following,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238\n    },\n    __self: this\n  }))))) : React.createElement(\"div\", {\n    style: {\n      minHeight: '150px',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, React.createElement(Spin, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  })));\n};\n\nexport default MyProfile;","map":{"version":3,"sources":["C:/Users/tiago/Desktop/THg/Projetos WEB/Faceapp/interface_facerecognition/shared/isomorphic/containers/Profile/Profile.js"],"names":["React","useState","useEffect","useCallback","Spin","Modal","Container","AvatarCard","Posts","Followers","Following","Wrapper","Banner","Navigation","ContentWrapper","useSelector","useDispatch","profileActions","axios","Uppy","Tus","GoogleDrive","Dropbox","Instagram","Dashboard","AwsS3","MyProfile","data","state","profile","loading","dispatch","getProfile","fetchProfileDataStart","postImage","albumBucketName","bucketRegion","AWS","config","update","region","credentials","Credentials","accessKeyId","secretAccessKey","upload","S3","ManagedUpload","params","Bucket","Key","photoKey","Body","file","promise","then","alert","viewAlbum","albumName","err","message","uppy","Core","id","autoProceed","restrictions","maxFileSize","maxNumberOfFiles","minNumberOfFiles","allowedFileTypes","logger","debugLogger","use","trigger","inline","closeModalOnClickOutside","showLinkToFileUploadResult","target","replaceTargetContent","showProgressDetails","proudlyDisplayPoweredByUppy","note","height","metaFields","name","placeholder","browserBackButtonClose","fields","getUploadParameters","fetch","method","mode","headers","accept","body","JSON","stringify","filename","contentType","type","metadata","meta","response","json","console","log","url","on","result","successful","failed","active","setActive","visible","setVisible","handleMenu","handleCancel","backgroundImage","profile_bg","avatar","username","post","length","following","minHeight","display","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport Spin from '@iso/ui/Antd/Spin/Spin';\nimport Modal from '@iso/ui/Antd/Modal/Modal';\nimport Container from '@iso/ui/UI/Container/Container';\nimport AvatarCard from '@iso/components/AvatarCard/AvatarCard';\nimport Posts from './Posts/Posts';\nimport Followers from './Followers/Followers';\nimport Following from './Following/Following';\nimport Wrapper, { Banner, Navigation, ContentWrapper } from './Profile.styles';\nimport { useSelector, useDispatch } from 'react-redux';\nimport profileActions from '@iso/redux/profile/actions';\nimport axios from 'axios';\nimport '@uppy/core/dist/style.css';\nimport '@uppy/dashboard/dist/style.css';\nimport Uppy from '@uppy/core';\nimport Tus from '@uppy/tus';\nimport GoogleDrive from '@uppy/google-drive';\nimport Dropbox from '@uppy/dropbox';\nimport Instagram from '@uppy/instagram';\nimport { Dashboard } from '@uppy/react';\nimport AwsS3 from '@uppy/aws-s3'\n\n\nconst MyProfile = () => {\n  \n  const data = useSelector(state => state.profile.data);\n  const loading = useSelector(state => state.profile.loading);\n  const dispatch = useDispatch();\n  const getProfile = useCallback(\n    () => dispatch(profileActions.fetchProfileDataStart()),\n    [dispatch]\n  );\n\n  const postImage = () => {\n      var albumBucketName = \"BUCKET_NAME\";\n      var bucketRegion = \"REGION\";\n\n      AWS.config.update({\n        region: bucketRegion,\n        credentials: new AWS.Credentials({\n          accessKeyId: 'akid', secretAccessKey: 'secret',\n        })\n      });\n\n      var upload = new AWS.S3.ManagedUpload({\n        params: {\n          Bucket: albumBucketName,\n          Key: photoKey,\n          Body: file\n        }\n      });\n\n      var promise = upload.promise();\n\n      promise.then(\n        function(data) {\n          alert(\"Successfully uploaded photo.\");\n          viewAlbum(albumName);\n        },\n        function(err) {\n          return alert(\"There was an error uploading your photo: \", err.message);\n        }\n      );\n    }\n\n  \n\n    const uppy = Uppy.Core({\n      id: 'uppyUpload', // use an id if you plan to use multiple Uppys (on different pages etc.)\n      autoProceed: false, // if true the file uploads as soon as you drag it into the upload area, or select it - your user cannot edit file name or add metadata or tags - for this reason, we use 'false'\n      restrictions: { // we can add restrictions here:\n         maxFileSize: 31457280, //i.e. 30MB\n         maxNumberOfFiles: 20,\n         minNumberOfFiles: null, // if null, no minimum requirement\n         allowedFileTypes: null // can use an array of extensions, i.e. ['.doc', '.docx', '.xls', '.xlsx']\n      },\n      logger: Uppy.debugLogger, // use this for debugging to see what's gone wrong\n   })\n   .use(Uppy.Dashboard, { // configure the Uppy Dashboard plugin...\n         trigger: \".UppyModalOpenerBtn\", // what we click to make Uppy dashboard modal appear - this is the class of our button, above\n         inline: false, // if true, dashboard becomes part of layout rather than a modal - you can eliminate the button in that case\n         closeModalOnClickOutside: true, // if true, we can click anywhere outside the modal to close it\n         showLinkToFileUploadResult: false, // if true, a link to the uploaded file is generated and copies to the user's clipboard when clicked. Note the link won't contain credentials, and you'll need to configure your bucket's permissions and CORS settings to get this to work\n         target: '#drag-drop-area', // this is the id of the <div> above - use a class instead of an id if multiple drag drop areas are required\n         replaceTargetContent: false, // if true, removes all children of the target element - use this to put an upload form in place which disappears if Uppy appears - a fallback option\n         showProgressDetails: true, // false shows % only while true shows % + MB of MB plus time left\n         proudlyDisplayPoweredByUppy: true, // true shows 'Powered by Uppy' branding; false removes this. Attribution is nice...\n         note: \"Images, Word, Excel, PDF, and similar files only, max 20 files of 30 MB each\", // instructions to your users\n         height: 470, // height of the Dashboard in pixels - only applies if \"inline: true\" above - doesn't apply here since we are using the modal - have included here for reference only\n         metaFields: [ // here we can include user editable fields, and we can use these elsewhere (i.e. upload as metadata, use as tags, use in our DB, etc.) Note that these don't seem to work out of the box - we need to add our own logic to make them work (notwithstanding the Uppy documentation...)\n            {id: 'name', name: 'Name', placeholder: 'You can rename the file here'}, // id is what we'll use to refer to this; name is what the user sees; placeholder is placeholder text\n            {id: 'caption', name: \"Caption\", placeholder: \"Briefly describe what the file contains\"}\n         ],\n         browserBackButtonClose: true // true allows the user to click the browser's back button to close the modal, rather than go back a page - this is a good idea!\n   })\n    \n    uppy.use(AwsS3, { // use the AwsS3 plugin                                  \n      fields: [ ], // empty array \n      getUploadParameters(file){ // here we prepare our request to the server for the upload URL\n         return fetch('https://04ie6y9uhl.execute-api.us-east-1.amazonaws.com/dev/client_upload', { // we'll send the info asynchronously via fetch to our nodejs server endpoint, '/uploader' in this case\n            method: 'POST',\n            mode: 'no-cors', // all the examples I found via the Uppy site used 'PUT' and did not work\n            headers: {\n              accept: 'application/json',\n              'content-type': 'application/json', // examples I found via the Uppy site used 'content-type': 'application/json' and did not work\n            },\n            body: JSON.stringify({\n                 filename: file.name, // here we are passing data to the server/back end\n                 contentType: file.type,\n                 metadata: {\n                     'name': file.meta['name'], // here we pass the 'name' variable to the back end, with 'file.meta['name']' referring to the 'name' from our metaFields id above\n                     'caption': file.meta['caption'] // here we pass the 'caption' variable to the back end, with 'file.meta['caption']' referring to the 'caption' from our metaFields id above\n                  },\n            })\n         }).then((response) => {\n             return response.json(); // return the server's response as a JSON promise\n         }).then((data) => {\n             console.log('>>>', data); // here you can have a look at the data the server sent back - get rid of this for production!\n             return {\n                method: data.method, // here we send method, url, fields and headers to the AWS S3 bucket\n                url: data.url,\n                fields: data.fields,\n                headers: data.headers,\n             };\n         });\n       },\n    })\n    uppy.on('complete', result => {\n      \n      console.log('successful files:', result.successful);\n      console.log('failed files:', result.failed);\n    });\n\n  const [active, setActive] = useState('post');\n  const [visible, setVisible] = useState(false);\n\n  useEffect(() => {\n    getProfile();\n  }, [getProfile]);\n\n  const handleMenu = type => {\n    if (type === 'post') {\n      setActive(type);\n    }\n    if (type === 'upload_picture') {\n      \n      setActive(type);\n      setVisible(true);\n    }\n    if (type === 'following') {\n      setActive(type);\n      setVisible(true);\n    }\n    \n  };\n\n  const handleCancel = () => {\n    setVisible(false);\n    setActive('post');\n  };\n\n  return (\n    <Wrapper>\n      {loading !== true ? (\n        <>\n          <Banner\n            className=\"profile-banner\"\n            style={{ backgroundImage: `url(${data.profile_bg})` }}\n          >\n            <Container className=\"container\">\n              <AvatarCard\n                avatar={data.avatar}\n                name={data.name}\n                username={data.username}\n              />\n            </Container>\n          </Banner>\n\n          <Navigation className=\"navigation\">\n            <Container className=\"container\">\n              <ul className=\"menu\">\n                <li\n                  className={active === 'post' ? 'active' : ''}\n                  onClick={() => handleMenu('post')}\n                >\n                  <strong>{data.post.length}</strong> Gallery\n                </li>\n                <li\n                  className={active === 'upload_picture' ? 'active' : ''}\n                  onClick={() => handleMenu('upload_picture')}\n                >\n                  <strong type=\"button\" class=\"ant-btn ant-btn-primary\"> Upload Pictures</strong>\n                </li>\n                <li\n                  className={active === 'following' ? 'active' : ''}\n                  onClick={() => handleMenu('following')}\n                >\n                  <strong>{data.following.length}</strong> Client List\n                </li>\n              </ul>\n            </Container>\n          </Navigation>\n\n          <ContentWrapper>\n            <Container className=\"container\">\n              <Posts\n                avatar={data.avatar}\n                username={data.username}\n                data={data.post}\n              />\n              <Modal\n                wrapClassName=\"follow-modal\"\n                visible={visible}\n                onCancel={handleCancel}\n                footer={null}\n              >\n                {active === 'upload_picture' && \n                <Dashboard\n                    plugins={['GoogleDrive', 'Dropbox', 'Instagram']}\n                    uppy={uppy}\n                    inline={true}\n                    target=\".DashboardContainer\"\n                    replaceTargetContent={true}\n                    showProgressDetails={true}\n                    note=\"\"\n                    height={470}\n                    width=\"100%\"\n                    metaFields={[\n                      { id: 'name', name: 'Name', placeholder: 'file name' },\n                      {\n                        id: 'caption',\n                        name: 'Caption',\n                        placeholder: 'describe what the image is about',\n                      },\n                    ]}\n                    browserBackButtonClose={true}\n                  />}\n                {active === 'following' && <Following data={data.following} />}\n              </Modal>\n            </Container>\n          </ContentWrapper>\n        </>\n      ) : (\n        <div\n          style={{\n            minHeight: '150px',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Spin />\n        </div>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default MyProfile;\n"]},"metadata":{},"sourceType":"module"}